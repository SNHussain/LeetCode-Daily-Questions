2 Approaches are there:
i) will require to reverse the linked list
ii) uses bit manipulation and doesnt require extra space or any need to reverse linked list.

Approach 1:
class Solution {
public:
    ListNode* reverseLL(ListNode* head) {
        //base case
        if (head == NULL || head->next == NULL) {
            return head;
        }

        ListNode* last = reverseLL(head->next);
        head->next->next = head;
        head->next = NULL;

        return last;
    }

    int getDecimalValue(ListNode* head) {
        head = reverseLL(head); 

        int result = 0, power = 0;
        while (head) {
            if (head->val == 1) {
                result += pow(2, power);
            }
            power++;
            head = head->next;
        }

        return result;
    }
};
//TC:0(N)+O(N)
//SC:0(N)


Approach 2:
class Solution {
public:
    int getDecimalValue(ListNode* head) {
        int result=0;
        
        ListNode* temp=head;

        while(temp){
            result = (result<<1) | (temp -> val);
            temp=temp->next;
        }

        return result;
    }
};

//TC:O(1)
//SC:O(1)
